<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bugmak&#39;s blog</title>
  
  <subtitle>Welcome to bugmak&#39;s blog!!!</subtitle>
  <link href="http://example.com/rss.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-03T02:53:34.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zhike w</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2025/06/04/hello-world/"/>
    <id>http://example.com/2025/06/04/hello-world/</id>
    <published>2025-06-04T15:39:10.825Z</published>
    <updated>2025-01-03T02:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BaseCTF2024</title>
    <link href="http://example.com/2025/06/04/BaseCTF/BaseCTF2024_RE/"/>
    <id>http://example.com/2025/06/04/BaseCTF/BaseCTF2024_RE/</id>
    <published>2025-06-04T14:30:00.000Z</published>
    <updated>2025-06-05T02:30:16.031Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>UPX mimi：</strong></p><p>​初步接触到了UPX加壳保护的知识和对应的脱壳工具，这是一种“压缩”保护壳，即将源程序代码进行压缩，然后配上解压缩代码，组成新的程序，即“UPX解压代码”+“压缩的源文件”。在程序启动时，会先执行UPX的解压代码，得到解压后的源文件，然后将控制流转移到源文件。</p></blockquote><blockquote><p><strong>ez_maze:</strong></p><p>​最基础的迷宫题目，从IDA中可以直接看到迷宫，人工就能得到路径。</p></blockquote><blockquote><p><strong>BasePlus:</strong></p><p>​无保护，直接拖入IDA，考察基础的阅读代码的能力，加密函数为Base64的一点点变化，对Base64加密后继续异或一下。很基础。第一次认真搓Base64的c语言代码，收获不少。</p></blockquote><blockquote><p><strong>Ez_Xor:</strong></p><p>​复习了大小端序的知识。</p><p>​“小端序”：低位有效字节保存在小地址。如0xDEADBEEF在内存中的顺序是（小地址）EF BE AD DE（大地址）。“大端序”相反。</p><p>​本题就是简单的流加密，生成密钥流然后加密。对应解密即可。</p></blockquote><blockquote><p><strong>UPX:</strong></p><p>​有壳，直接脱壳报错。学习到了，改标志位来保护加壳程序的手段，我们的反制操作就是打开文件，将对应的标志位从小写改回大写。之后就可以正常脱壳了。</p><p>​拖入IDA后，考察的是换表的Base64。唯一需要注意的点就是因为题目源码是C语言，在IDA字符串显示中给双引号全面加了转义符号的，不要搞错了。</p></blockquote><p><img src="/pictures/BaseCTF2024%5Cimage-20250425170632940.png" alt="image-20250425170632940"></p><blockquote><p><strong>lk:</strong></p><p>​比较大的线性方程组，考察python的z3solver库使用。</p></blockquote><blockquote><p><strong>喝杯下午茶：</strong></p><p>​标准的Tea加密，第一次使用C语言实现了该算法，收获不少。</p></blockquote><blockquote><p><strong>Ezpy:</strong></p><p>​考察python打包出的EXE程序。反编译出源码。</p><p>​再考察RC4加密。</p></blockquote><blockquote><p><strong>最简单的编码：</strong></p><p>​无保护技术，纯考验伪代码的阅读水平，耐下心来分析就好了。</p></blockquote><blockquote><p><strong>neuro爱数学：</strong></p><p>​</p></blockquote><blockquote><p><strong>RivestCipher:</strong></p><p>​考察标准RC4加密算法。</p></blockquote><blockquote><p><strong>ezAndroid:</strong></p><p>​收获到了逆向apk安装包的软件jadx，接触到了so文件（共享库）逆向，是一些没有接触过的操作。又要读奇怪的代码。唉！</p></blockquote><hr><h1 id="UPX-PRO-MAX"><a href="#UPX-PRO-MAX" class="headerlink" title="UPX PRO MAX"></a><strong>UPX PRO MAX</strong></h1><p>​直接运行EXE程序，会出现下图的显示。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506132159230.png" alt="image-20250506132159230"></p><p>DIE也看到UPX壳。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506132311405.png" alt="image-20250506132311405"></p><p>直接上工具是不行的啊，报错了。</p><p>跟着WP学习——<strong>利用ESP定律x64dbg手脱UPX壳</strong>。</p><blockquote><p>“ESP定律”也称“堆栈平衡定律”</p><p>由于在程序自解密或者自解压过程中, 多数壳会先将当前寄存器状态压栈, 如使用<code>pushad</code>, 而在解压结束后, 会将之前的寄存器值出栈, 如使用<code>popad</code>. 因此在寄存器出栈时, 往往程序代码被恢复, 此时硬件断点触发（这就是我们要下硬件断点的原因），然后在程序当前位置, 只需要一些单步操作, 就会到达正确的OEP位置。</p><ol><li>程序刚载入开始 <code>pushad/pushfd</code></li><li>将全部寄存器压栈后就设对 ESP 寄存器设硬件断点</li><li>运行程序, 触发断点</li><li>删除硬件断点开始分析</li></ol></blockquote><p>在x64dbg中，F9两次后来到这个压栈的操作处。接着单步运行一次，看到ESP的值为红色，代表其值被修改了，我们右键选择“在内存窗口中转到”，然后在栈中打下硬件断点。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506133643545.png" alt="image-20250506133643545"></p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506134057787.png" alt="image-20250506134057787"></p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506134312068.png" alt="image-20250506134312068"></p><p>之后F9，触发断点后单步运行几下就找到OEP了，即程序入口点。可以看到这个地方的多次pop指令。</p><p>根据wp中的提示，0X41CF65跳转的地方就是程序的入口点了。应该是了。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506134519180.png" alt="image-20250506134519180"></p><p>下面根据WP中的操作介绍一步步就可以脱出无壳的程序了，叫UPX_PRO_MAX_dump_SCY.exe。</p><blockquote><p><code>scylla</code>插件：在 x64dbg 中内置的 Scylla 插件可用于 dump 进程，<strong>即将内存中的程序数据转储到磁盘上</strong>，形成一个可执行文件的副本，方便后续对程序的分析和研究。</p><p><code>IAT AutoSearch</code>： 在分析经过加壳或加密的程序时，程序的导入表可能被破坏或隐藏，IAT AutoSearch 可以自动扫描内存或代码段，寻找可能的导入函数地址，帮助逆向工程师快速找到程序所调用的外部函数。</p></blockquote><blockquote><p>程序的导入表是程序的关键数据结构，用于列出程序运行时需要从其他模块（通常是 DLL）中导入的函数和变量。以下是导入表的详细介绍：</p><ul><li><p>导入表是程序的一个数据结构，它包含了一系列的引用信息，指向程序运行时需要调用的外部函数和变量所在的模块及其具体地址。</p></li><li><p><strong>便于调用外部模块功能</strong> ：程序通常不会将所有功能都自己实现，而是通过调用系统或第三方提供的 DLL 中的函数和变量来实现复杂的功能。导入表就像一个目录，告诉操作系统程序需要从哪些 DLL 中使用哪些功能。</p></li><li><p><strong>便于程序的动态链接</strong> ：它支持程序的动态链接机制。程序在编译时不会直接将 DLL 中的函数和变量代码包含进来，而是在运行时装载所需的 DLL，并通过导入表找到具体的函数和变量地址，这样可以减少程序自身的体积，同时方便对 DLL 进行更新和共享。</p></li><li><p><strong>导入模块名表</strong> ：存放了程序需要导入的各个模块的名字，比如 “kernel32.dll”“user32.dll” 等。</p></li><li><p><strong>导入函数名表</strong> ：对于每个导入模块，都有一个对应的导入函数名表，列出了从该模块中导入的具体函数名称，如 “MessageBoxA”“CreateFileA” 等。</p></li><li><p><strong>导入函数地址表（IAT）</strong> ：在程序运行时，操作系统会将每个导入函数的实际内存地址填入这个表中，程序通过这个表中的地址来调用相应的函数。</p></li></ul></blockquote><p>脱壳后的程序导入IDA中，很清晰的加密逻辑。直接逆向写脚本就行。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506141212651.png" alt="image-20250506141212651"></p><p>但是这里出现了一个坑：<code>sub_401550</code>函数其实就是一些加密字符串移动操作，分成几部分存储在几个变量中。但是在验证函数中，全程只用到了a1和a2部分，也就是sub_401550中的a2和a3，不是完整的密文，我觉得这里是中间出了问题，而且这个提取出来的exe程序无法正常运行，IDA中也调试不行，只能静态分析。所以还是有点不靠谱的东西存在。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506142108769.png" alt="image-20250506142108769"></p><p><img src="/pictures/BaseCTF2024%5Cimage-20250506141429954.png" alt="image-20250506141429954"></p><hr><h1 id="EZ-VM"><a href="#EZ-VM" class="headerlink" title="EZ_VM"></a>EZ_VM</h1><p>​基本信息：<code>pyinstaller</code>打包的<code>ELF64</code>位程序，使用<code>pydumpck</code>解包得到<code>py</code>文件。</p><p>​加密逻辑在<code>what.py</code>文件，打开，里面函数名称和变量名都是用数字代替的，还有一些小错误，比如本来的“while”语句变成“if”，需要改过来。</p><p>​代码的逻辑就是：分别使用一个数组变量和一个字典来模拟一个栈和内存，使用变量模拟寄存器，通过数组的<code>pop</code>和<code>push</code>模拟栈的操作，使用函数定义各种汇编指令，如push、pop、add、sub等等，都是统一操作数长度。就这样定义了一个能够通过汇编指令进行运行的“虚拟机”，里面存在出题人预先写好的一段静态汇编代码，作为加密函数。</p><blockquote><ol><li>我们首要任务就是给源python代码进行重命名和明显的错误纠正。（需要足够熟悉汇编指令，起码的要知道。转移指令还没那么重要，因为我们不关心程序的执行流程，我们只需要注意密文的来处即可。）</li><li>然后在其中插入print调试语句输出操作指令、栈和内存的值，锁定密文的存储地方，观察加密方法。</li><li>根据加密方法写逆向脚本。</li></ol></blockquote><p>​</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc_flag = [<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">18</span>,<br>    <span class="hljs-number">22</span>,<br>    <span class="hljs-number">38</span>,<br>    <span class="hljs-number">23</span>,<br>    <span class="hljs-number">18</span>,<br>    <span class="hljs-number">61</span>,<br>    <span class="hljs-number">25</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">4</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">95</span>,<br>    <span class="hljs-number">20</span>,<br>    <span class="hljs-number">29</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">82</span>,<br>    <span class="hljs-number">1</span>,<br>    <span class="hljs-number">29</span>,<br>    <span class="hljs-number">25</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">81</span>,<br>    <span class="hljs-number">72</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">3</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">79</span>,<br>    <span class="hljs-number">73</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">15</span>,<br>    <span class="hljs-number">9</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">7</span>,<br>    <span class="hljs-number">80</span>,<br>    <span class="hljs-number">82</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">84</span>,<br>    <span class="hljs-number">77</span>,<br>    <span class="hljs-number">130</span>]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Opcode</span>:<br>    vm_push = <span class="hljs-number">240</span><br>    vm_pop = <span class="hljs-number">241</span><br>    vm_and = <span class="hljs-number">242</span><br>    vm_or = <span class="hljs-number">243</span><br>    vm_not = <span class="hljs-number">244</span><br>    vm_xor = <span class="hljs-number">245</span><br>    vm_jmp = <span class="hljs-number">246</span><br>    vm_jz = <span class="hljs-number">247</span><br>    vm_label = <span class="hljs-number">248</span><br>    vm_strlen = <span class="hljs-number">249</span><br>    vm_loadchar = <span class="hljs-number">250</span><br>    vm_store = <span class="hljs-number">251</span><br>    vm_load = <span class="hljs-number">252</span><br>    vm_add = <span class="hljs-number">253</span><br>    vm_sub = <span class="hljs-number">254</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VM</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.stack = []<br>        <span class="hljs-variable language_">self</span>.bytecode = []<br>        <span class="hljs-variable language_">self</span>.pc = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.labels = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.memory = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-variable language_">self</span>.stack.append(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.stack:<br>            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">&#x27;something wrong..&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.stack.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_scan_labels</span>(<span class="hljs-params">self</span>):<br>        labels = &#123;&#125;<br>        pc = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> pc &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.bytecode):<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.bytecode[pc] == Opcode.vm_label:<br>                label_name = <span class="hljs-variable language_">self</span>.bytecode[pc + <span class="hljs-number">1</span>]<br>                labels[label_name] = pc<br>                pc += <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                pc += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_and</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b &amp; a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_or</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b | a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_not</span>(<span class="hljs-params">self</span>):<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(~b)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_xor</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b ^ a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_jmp</span>(<span class="hljs-params">self</span>):<br>        label_name = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-variable language_">self</span>.pc = <span class="hljs-variable language_">self</span>.labels[label_name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_jz</span>(<span class="hljs-params">self</span>):<br>        label_name = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-keyword">if</span> a == b:<br>            <span class="hljs-variable language_">self</span>.pc = <span class="hljs-variable language_">self</span>.labels[label_name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_strlen</span>(<span class="hljs-params">self</span>):<br>        string = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(<span class="hljs-built_in">len</span>(string))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_loadchar</span>(<span class="hljs-params">self</span>):<br>        string = <span class="hljs-variable language_">self</span>.pop()<br>        index = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(<span class="hljs-built_in">ord</span>(string[index]))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_store</span>(<span class="hljs-params">self</span>):<br>        value = <span class="hljs-variable language_">self</span>.pop()<br>        key = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;r&#x27;</span>:<br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.memory:<br>                <span class="hljs-variable language_">self</span>.memory[key] = []<br>            <span class="hljs-variable language_">self</span>.memory[key].append(value)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.memory[key] = value<br>        <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_load</span>(<span class="hljs-params">self</span>):<br>        key = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-variable language_">self</span>.push(<span class="hljs-variable language_">self</span>.memory[key])<br>        <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_add</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b + a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_sub</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b - a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, bytecode</span>):<br>        <span class="hljs-variable language_">self</span>.bytecode = bytecode<br>        <span class="hljs-variable language_">self</span>.pc = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.labels = <span class="hljs-variable language_">self</span>._scan_labels()<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.pc &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.bytecode):<br>            opcode = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>            <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> opcode == Opcode.vm_push:<br>                value = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>                <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.push(value)<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_pop:<br>                <span class="hljs-variable language_">self</span>.pop()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_and:<br>                <span class="hljs-variable language_">self</span>.vm_and()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_or:<br>                <span class="hljs-variable language_">self</span>.vm_or()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_not:<br>                <span class="hljs-variable language_">self</span>.vm_not()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_xor:<br>                <span class="hljs-variable language_">self</span>.vm_xor()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_jmp:<br>                <span class="hljs-variable language_">self</span>.vm_jmp()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_jz:<br>                <span class="hljs-variable language_">self</span>.vm_jz()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_label:<br>                <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_strlen:<br>                <span class="hljs-variable language_">self</span>.vm_strlen()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_loadchar:<br>                <span class="hljs-variable language_">self</span>.vm_loadchar()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_store:<br>                <span class="hljs-variable language_">self</span>.vm_store()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_load:<br>                <span class="hljs-variable language_">self</span>.vm_load()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_add:<br>                <span class="hljs-variable language_">self</span>.vm_add()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_sub:<br>                <span class="hljs-variable language_">self</span>.vm_sub()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;pc: <span class="hljs-subst">&#123;self.pc&#125;</span>| opcode: <span class="hljs-subst">&#123;get_opcode_name(opcode)&#125;</span>, stack: <span class="hljs-subst">&#123;self.stack&#125;</span>, memory: <span class="hljs-subst">&#123;self.memory&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, serial</span>):<br>        bytecode = [<br>            Opcode.vm_push, serial,<br>            Opcode.vm_strlen,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;l1&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">0</span>,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_label, <span class="hljs-string">&#x27;s&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;l1&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">1</span>,<br>            Opcode.vm_sub,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_jz, <span class="hljs-string">&#x27;e&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, serial,<br>            Opcode.vm_loadchar,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">1</span>,<br>            Opcode.vm_add,<br>            Opcode.vm_push, serial,<br>            Opcode.vm_loadchar,<br>            Opcode.vm_xor,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;r&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">1</span>,<br>            Opcode.vm_add,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_jmp, <span class="hljs-string">&#x27;s&#x27;</span>,<br>            Opcode.vm_label, <span class="hljs-string">&#x27;e&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, serial,<br>            Opcode.vm_loadchar,<br>            Opcode.vm_push, <span class="hljs-number">255</span>,<br>            Opcode.vm_xor,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;r&#x27;</span><br>        ]<br>        <span class="hljs-variable language_">self</span>.run(bytecode)<br>        enc = <span class="hljs-variable language_">self</span>.memory[<span class="hljs-string">&#x27;r&#x27;</span>]<br>        <span class="hljs-keyword">return</span> enc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_opcode_name</span>(<span class="hljs-params">opcode</span>):<br>    <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> Opcode.__dict__.items():<br>        <span class="hljs-keyword">if</span> value == opcode:<br>            <span class="hljs-keyword">return</span> name<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>vm = VM()<br>test_flag = <span class="hljs-string">&quot;BaseCTF&#123;VM_is_awesome&#125;&quot;</span><br>enc = vm.encrypt(test_flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;encrypted test_flag: <span class="hljs-subst">&#123;enc&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;original flag: <span class="hljs-subst">&#123;enc_flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>根据WP提示重命名后，观察传输的调试信息。看一下开头和结尾就行。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250509160138052.png" alt="image-20250509160138052"></p><p><img src="/pictures/BaseCTF2024%5Cimage-20250509160305470.png" alt="image-20250509160305470"></p><p>​所以猜到加密逻辑是：从前往后，相邻两位异或，尾部和255异或。</p><p>这里给出我的解密脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc_flag = [<span class="hljs-number">35</span>, <span class="hljs-number">18</span>, <span class="hljs-number">22</span>, <span class="hljs-number">38</span>, <span class="hljs-number">23</span>,  <span class="hljs-number">18</span>,<span class="hljs-number">61</span>, <span class="hljs-number">25</span>,  <span class="hljs-number">83</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>,<span class="hljs-number">83</span>,<span class="hljs-number">95</span>,  <span class="hljs-number">20</span>,  <span class="hljs-number">29</span>, <span class="hljs-number">83</span>,<span class="hljs-number">82</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">29</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">81</span>,<span class="hljs-number">72</span>,<span class="hljs-number">76</span>,<span class="hljs-number">85</span>,<span class="hljs-number">3</span>,<span class="hljs-number">85</span>,<span class="hljs-number">79</span>,<span class="hljs-number">73</span>,<span class="hljs-number">83</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">85</span>,<span class="hljs-number">7</span>,<span class="hljs-number">80</span>,<span class="hljs-number">82</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">84</span>,<span class="hljs-number">77</span>,<span class="hljs-number">130</span>,<span class="hljs-number">255</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc_flag)):<br>    char = enc_flag[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(enc_flag)):<br>        char = char ^ enc_flag[j]<br><br>    flag += <span class="hljs-built_in">chr</span>(char)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><hr><h1 id="Microgame"><a href="#Microgame" class="headerlink" title="Microgame"></a>Microgame</h1><p>​不理解，不会游戏逆向，后面得学啊。专门做了一个CE的学习。</p><p>​学习完CE，专门出个WP来做。</p><hr><h1 id="neuro爱数学"><a href="#neuro爱数学" class="headerlink" title="neuro爱数学"></a>neuro爱数学</h1><p>​直接打开IDA看看<code>main</code>函数，程序无壳，就是考察数学问题。</p><p><img src="/pictures/BaseCTF2024%5Cimage-20250512120720066.png" alt="image-20250512120720066"></p><p><img src="/pictures/BaseCTF2024%5Cimage-20250512130852846.png" alt="image-20250512130852846"></p><p><img src="/pictures/BaseCTF2024%5Cimage-20250512130953971.png" alt="image-20250512130953971"></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//注意：各个变量和函数的类型是关键，不能搞错，需要对照IDA伪代码</span><br>    <span class="hljs-type">int64_t</span> v5=<span class="hljs-number">0x400C0210000001</span>;<span class="hljs-comment">//这个值是固定的，但是需要动调程序得到这个值。</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">-60</span>; i&lt;=<span class="hljs-number">59</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">44</span> || i == <span class="hljs-number">58</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;符合条件的i值位：%d\n&quot;</span>, i);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v12 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + <span class="hljs-number">37</span>);<br>        <span class="hljs-keyword">if</span>(v12 &lt;= <span class="hljs-number">54</span> &amp;&amp; _bittest64((<span class="hljs-type">int64_t</span>*)&amp;v5,(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v12) != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;符合条件的i值为：%d\n&quot;</span>, i);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/pictures/BaseCTF2024%5Cimage-20250512131328904.png" alt="image-20250512131328904"></p><p>然后使用python脚本展开多项式得到系数。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, expand<br><br><span class="hljs-comment"># 定义符号变量</span><br>x = symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br><br><span class="hljs-comment"># 构造多项式</span><br>polynomial = (x - <span class="hljs-number">44</span>) * (x - <span class="hljs-number">58</span>) * (x - <span class="hljs-number">5</span>) * (x + <span class="hljs-number">37</span>) * (x - <span class="hljs-number">17</span>) * (x + <span class="hljs-number">9</span>) * (x - <span class="hljs-number">6</span>) * (x + <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 展开多项式</span><br>expanded_polynomial = expand(polynomial)<br><br><span class="hljs-comment"># 提取并打印系数</span><br>standard_form = expanded_polynomial.as_poly()  <span class="hljs-comment"># 获取标准形式的多项式</span><br>coefficients = standard_form.all_coeffs()    <span class="hljs-comment"># 获取所有系数</span><br><br><span class="hljs-comment"># 打印系数逆序（从常数项到最高次项）。因为正常是从高次项到低次项。</span><br><span class="hljs-built_in">print</span>(coefficients[::-<span class="hljs-number">1</span>])<br><span class="hljs-comment">#[-1733624640, 134045088, 122783468, -12168520, -1364231, 121272, -358, -80, 1]</span><br></code></pre></td></tr></table></figure><p><img src="/pictures/BaseCTF2024%5Cimage-20250512131708984.png" alt="image-20250512131708984"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPX mimi：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	初步接触到了UPX加壳保护的知识和对应的脱壳工具，这是一种“压缩”保护壳，即将源程序代码进行压缩，然后配上解压缩代码，组成新的程序，即“UPX解压代码”+“压缩的源文</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
