<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bugmak&#39;s_blog</title>
  
  <subtitle>Welcome to bugmak&#39;s blog!!!</subtitle>
  <link href="http://localhost:4000/rss.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2025-06-21T06:41:54.417Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>zhike w</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ISCTF2024</title>
    <link href="http://localhost:4000/2025/06/05/ISCTF2024/RE/"/>
    <id>http://localhost:4000/2025/06/05/ISCTF2024/RE/</id>
    <published>2025-06-05T03:42:59.000Z</published>
    <updated>2025-06-21T06:41:54.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ezre"><a href="#Ezre" class="headerlink" title="Ezre"></a>Ezre</h1><blockquote><p>​一个简单的维吉尼亚加密，看了半天没看出来，在强行写解密算法后，才突然发现。</p></blockquote><hr><h1 id="《回忆安魂曲》三——mainn-exe"><a href="#《回忆安魂曲》三——mainn-exe" class="headerlink" title="《回忆安魂曲》三——mainn.exe"></a>《回忆安魂曲》三——mainn.exe</h1><blockquote><p>​迷宫类题目，无壳64位。槽点就是将移动键换成了“love”四个字符，然后迷宫对应的字符串在结尾多给了几个，起到迷惑性效果，差点让我搞不清行列数，还有行坐标从0开始，列坐标从0开始，起始点坐标（1，1）。开始直接把我绕晕。</p><p>​确定迷宫后，又复习了DFS算法。收获不少。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">maze_str = <span class="hljs-string">&quot;&quot;&quotquot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        <span class="hljs-built_in">print</span>(maze_str[i*<span class="hljs-number">30</span>+j], end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br><br>maze = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    maze_row = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        maze_row.append(maze_str[i*<span class="hljs-number">30</span>+j])<br>    maze.append(maze_row)<br><br>start = (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">maze, x, y,path</span>):<br>    <span class="hljs-keyword">if</span> maze[x][y] == <span class="hljs-string">&#x27;E&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> x &gt;= <span class="hljs-built_in">len</span>(maze) <span class="hljs-keyword">or</span> y &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y &gt;= <span class="hljs-built_in">len</span>(maze[<span class="hljs-number">0</span>]) <span class="hljs-keyword">or</span> maze[x][y] == <span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-keyword">or</span> maze[x][y] == <span class="hljs-string">&#x27;C&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    maze[x][y] = <span class="hljs-string">&#x27;#&#x27;</span><br><br>    directions = [(-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]<br>    directions_str = [<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        dx = directions[i][<span class="hljs-number">0</span>]<br>        dy = directions[i][<span class="hljs-number">1</span>]<br>        path.append(directions_str[i])<br>        <span class="hljs-keyword">if</span> dfs(maze, x+dx, y+dy,path):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        path.pop()<br><br>    maze[x][y] = <span class="hljs-string">&#x27;.&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_path</span>():<br>    path = []<br>    <span class="hljs-keyword">if</span> dfs(maze, start[<span class="hljs-number">0</span>], start[<span class="hljs-number">1</span>], path):<br>        <span class="hljs-keyword">return</span> path<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No path found&quot;</span><br><br>ans = find_path()<br>ans = <span class="hljs-string">&#x27;&#x27;</span>.join(ans)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><hr><h1 id="找啊找——zhao-exe"><a href="#找啊找——zhao-exe" class="headerlink" title="找啊找——zhao.exe"></a><strong>找啊找</strong>——zhao.exe</h1><blockquote><p>​直接拖入IDA发现只有很少几个函数，于是去查壳发现UPX壳，然后直接-d脱壳失败，拖入HxD发现标志位被改成APK了，改回来就成功脱壳了。</p><p>​再拖入IDA中就正常了，逻辑很简单，查看加密逻辑，先大小写字母替换，再异或一下。静态分析时直接去数据节查看时，得到一组数据，然后写python代码，跑出来提示为错误的flag，是出题人挖的一个坑。</p><p>​反复查看加密逻辑发现没有问题，最后动态调试，在比较之前查看数据，发现程序里存储的加密数据被改了，看来是程序在运行初始化时才给出真正的加密flag。取出数据，跑解密脚本就ok了。</p><p>​还是动调发现问题。</p></blockquote><hr><h1 id="py不好，会被ban"><a href="#py不好，会被ban" class="headerlink" title="py不好，会被ban"></a>py不好，会被ban</h1><blockquote><p>​python的exe程序。先使用Pyinstxtractor解出pyc，然后直接托在线平台解出py。我开始找的平台解不出来，我还在猜是不是题目加难度了，导致文件进行了一定的修改，不能直接解出来。原来是工具不行！最后看wp才发现这个网站。</p><p>​解出py后直接反向写解密逻辑即可解密。</p></blockquote><hr><h1 id="你知道-elf文件吗"><a href="#你知道-elf文件吗" class="headerlink" title="你知道.elf文件吗"></a>你知道.elf文件吗</h1><blockquote><p>​跑不起来，签到题，没有技术含量，算了。</p></blockquote><hr><h1 id="《回忆安魂曲》二——test11"><a href="#《回忆安魂曲》二——test11" class="headerlink" title="《回忆安魂曲》二——test11"></a>《回忆安魂曲》二——test11</h1><blockquote><p>​一个ELF文件，使用IDA远程调试，收获到了IDA调试ELF程序的方法，进一步增加了动态调试的经验，认识到一种干扰编译的方法，就是在调用程序时，不直接使用call，而是将函数首地址加载进寄存器，然后使用call寄存器调用，这样IDA分析不出来，只有动调能看到其中的跳转逻辑。</p><p>​查阅知道，这是一种“控制流平坦化”的反编译技术，通过主分发器来控制程序基本块的执行流程。</p><p>​得知flag长度为36位，然后enc加密，动态调试分析加密逻辑。确定是逐字节加密，假设当前字符下标为i，字符串数组为str。有个密钥key为字符串“i_can_reverse_but_i_can_not_have_you“。</p><p>​最终得到的加密数据为：[234, 12, 26, 17, 246, 44, 29, 62, 23, 53, 49, 41, 244, 57, 57, 211, 195, 45, 0, 16, 48, 61, 204, 0, 211, 192, 75, 198, 17, 199, 41, 62, 186, 96, 144, 52]</p><ul><li>str[i] &#x3D; str[i] ^ (0x66 + i) ^ 0x52</li><li>str[i] &#x3D; str[i] + 6</li><li>str[i] &#x3D; str[i] ^ (key[i] + i)</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">234</span>, <span class="hljs-number">12</span>, <span class="hljs-number">26</span>, <span class="hljs-number">17</span>, <span class="hljs-number">246</span>, <span class="hljs-number">44</span>, <span class="hljs-number">29</span>, <span class="hljs-number">62</span>, <span class="hljs-number">23</span>, <span class="hljs-number">53</span>, <span class="hljs-number">49</span>, <span class="hljs-number">41</span>, <span class="hljs-number">244</span>, <span class="hljs-number">57</span>, <span class="hljs-number">57</span>, <span class="hljs-number">211</span>, <span class="hljs-number">195</span>, <span class="hljs-number">45</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">48</span>, <span class="hljs-number">61</span>, <span class="hljs-number">204</span>, <span class="hljs-number">0</span>, <span class="hljs-number">211</span>, <span class="hljs-number">192</span>, <span class="hljs-number">75</span>, <span class="hljs-number">198</span>, <span class="hljs-number">17</span>, <span class="hljs-number">199</span>, <span class="hljs-number">41</span>, <span class="hljs-number">62</span>, <span class="hljs-number">186</span>, <span class="hljs-number">96</span>, <span class="hljs-number">144</span>, <span class="hljs-number">52</span>]<br>key = <span class="hljs-string">&#x27;i_can_reverse_but_i_can_not_have_you&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] = (enc[i] ^ (<span class="hljs-built_in">ord</span>(key[i]) + i)) &amp; <span class="hljs-number">0xff</span><br>    enc[i] = (enc[i] - <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xff</span><br>    enc[i] = (enc[i] ^ <span class="hljs-number">0x52</span> ^(<span class="hljs-number">0x66</span> + i)) &amp; <span class="hljs-number">0xff</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment">#ISCTF&#123;as_her_never_will_come_back!!&#125;</span><br></code></pre></td></tr></table></figure><hr><h1 id="《回忆安魂曲》四——文件夹：初识风仙儿"><a href="#《回忆安魂曲》四——文件夹：初识风仙儿" class="headerlink" title="《回忆安魂曲》四——文件夹：初识风仙儿"></a>《回忆安魂曲》四——文件夹：初识风仙儿</h1><blockquote><p>​解压得到一个main.py和so文件。这是一个<code>Cpython</code>逆向题，我是第一次遇见，先跟着WP学习，但是第一步通过python中的<code>help函数</code>查看模块就出问题了。为什么呢，因为几个虚拟机的python版本不对，需要3.10的，而且本机是windows系统，一直是要么导入错系统test模块，要么导入不进，唉，环境愁死人！下载python3.10还把我的ubuntu20.04给干崩了，被我直接删了。<strong>之后再干这种活要拍快照了</strong>！最后在ubuntu24.04中下载好了，然后就导入进去了。真的被环境折磨惨了啊。</p><p>​看了教程，都是神仙，有的直接猜出加密算法，有的一点点死看IDA中的几千行<code>Cython代码</code>，有的凭空生成了so对应的python源代码。一个都行不通，最后在网上找了个AI代码调整，把原本的几千行<code>Cython</code>给优化了，出了一个简化的C语言版，并且整理出了核心逻辑，于是我直接看核心加密逻辑，很清晰，然后写解密就出了。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">hack_data = [<span class="hljs-number">27</span>, <span class="hljs-number">16</span>, <span class="hljs-number">43</span>, <span class="hljs-number">29</span>, <span class="hljs-number">127</span>, <span class="hljs-number">46</span>, <span class="hljs-number">51</span>, <span class="hljs-number">102</span>, <span class="hljs-number">50</span>, <span class="hljs-number">1</span>, <span class="hljs-number">112</span>, <span class="hljs-number">50</span>, <span class="hljs-number">53</span>, <span class="hljs-number">101</span>, <span class="hljs-number">57</span>, <span class="hljs-number">1</span>] <br>key = <span class="hljs-string">&#x27;H1m&#x27;</span> sbox = [<span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>]  <br>flag_list = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sbox)):<br>    tmp = hack_data[i] ^ <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])<br>    flag_list[sbox[i]] = tmp<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag_list)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag_list[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h1><blockquote><p>​一种新的指令集，对应的汇编语言也不一样，需要重新学习。</p></blockquote><p>​单独出一个wp来记录学习过程中得到的知识。</p><hr><h1 id="桀桀桀"><a href="#桀桀桀" class="headerlink" title="桀桀桀"></a>桀桀桀</h1><blockquote><p>​<code>rep stosd是一条高效的字符串操作指令，适用于快速初始化或填充内存区域，edi保存填充地址，ecx保存填充次数，eax保存单次填充值。</code></p><p>​这一题很有意思啊，有花指令、TLS、伪随机数和魔改tea，有很多可学的点，在做题的时候，由于对花指令的不够全面的了解，和对TLS的不全面了解，导致我一直困在对非核心部分的探索学习中，始终未能抓住主要逻辑，最后导致身心疲惫。</p><p>​于是决定参照WP和网上的资料，好好恶补一下这些方面的知识，并且记录下来。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x4119E2</span>, <span class="hljs-number">0x4119E7</span>):<span class="hljs-comment">#IDA的patch脚本，记住使用到的函数名就好。</span><br>    idc.patch_byte(i, <span class="hljs-number">0x90</span>)<br></code></pre></td></tr></table></figure><p>专门出一个WP，记录一下这些难题。</p><hr><h1 id="嘿嘿嘿"><a href="#嘿嘿嘿" class="headerlink" title="嘿嘿嘿"></a>嘿嘿嘿</h1><p>​无壳，验证长度32位，然后进入140001850，有SMC保护技术，我们修改标志位绕过反调试，</p><p><img src="/pictures/ISCTF2024/image-20250521110206759.png" alt="image-20250521110206759"></p><p><img src="/pictures/ISCTF2024/image-20250521110250703.png" alt="image-20250521110250703"></p><p>​这里也没有调用，我们先不用管140001A0函数，继续去main函数中看程序逻辑。看到1400017B0函数，马上就调用了解密出的函数，参数分别是字符串”Welcome_to_ISCTF”，还有两个空数组。</p><p><img src="/pictures/ISCTF2024/image-20250521110613803.png" alt="image-20250521110613803"></p><p>​先看140001440，对字符串进行异或，存储到a2中，140003270数据可以直接看到。这里需要注意的是，在IDA中数据以小端保存，尽管字符串显示的顺序是“Welcome_to_ISCTF”，但在栈帧中保存的顺序其实是cleW……，需要每4个字节逆序，这样才是a1[i]的值。</p><p><img src="/pictures/ISCTF2024/image-20250521110827346.png" alt="image-20250521110827346"></p><p><img src="/pictures/ISCTF2024/image-20250521110918291.png" alt="image-20250521110918291"></p><p>​接着进入1400014A0函数，a1是空数组，a2是才加密的中间密钥的指针。如果只是出flag的话，这里没有必要深入分析了，直接取最终密钥就行了。</p><p><img src="/pictures/ISCTF2024/image-20250521104520689.png" alt="image-20250521104520689"></p><p>​回到主函数，1400017B0函数才是加密的地方，继续看140001630，由于是对明文进行了分块的，分成2个16字节加密的。</p><p><img src="/pictures/ISCTF2024/image-20250521113825145.png" alt="image-20250521113825145"></p><p>​里面两个函数，一个加密，一个逆序复制。</p><p><img src="/pictures/ISCTF2024/image-20250521112328705.png" alt="image-20250521112328705"></p><p>​加密以4字节为一个单位，将16字节分为4个元素，加密32轮，整体加密32&#x2F;4&#x3D;8轮。加密方式就是异或1400013F0的返回值。</p><p><img src="/pictures/ISCTF2024/image-20250521112403260.png" alt="image-20250521112403260"></p><p>​a2确定是1。a1是那群异或得到的值。</p><p><img src="/pictures/ISCTF2024/image-20250521113204681.png" alt="image-20250521113204681"></p><p>​这里有一个映射表，256字节。</p><p><img src="/pictures/ISCTF2024/image-20250521113218351.png" alt="image-20250521113218351"></p><p>​映射后的值为a1.</p><p><img src="/pictures/ISCTF2024/image-20250521113233640.png" alt="image-20250521113233640"></p><p>​这里其实是一种扩展的左移并记录溢出位的操作。</p><p><img src="/pictures/ISCTF2024/image-20250521113401853.png" alt="image-20250521113401853"></p><p>再看这个函数，以4字节为整体进行逆序，因为每次加密只有16字节参与，所以只需要移动4次。</p><p><img src="/pictures/ISCTF2024/image-20250521113539461.png" alt="image-20250521113539461"></p><p>看回主函数，通过调试确定，比对的时候密文端序不变，解密脚本中就直接使用数据。</p><p><img src="/pictures/ISCTF2024/image-20250521113646251.png" alt="image-20250521113646251"></p><p>最后完全不看WP，自己写出来了，Exp如下。花了4个小时吧。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">//密钥在动调的时候取出就行了。</span><br><span class="hljs-type">uint8_t</span> key[<span class="hljs-number">128</span>] = &#123;<span class="hljs-number">64</span>, <span class="hljs-number">219</span>, <span class="hljs-number">65</span>, <span class="hljs-number">24</span>, <span class="hljs-number">40</span>, <span class="hljs-number">193</span>, <span class="hljs-number">230</span>, <span class="hljs-number">145</span>, <span class="hljs-number">203</span>, <span class="hljs-number">169</span>, <span class="hljs-number">18</span>, <span class="hljs-number">125</span>, <span class="hljs-number">170</span>, <span class="hljs-number">192</span>, <span class="hljs-number">199</span>, <span class="hljs-number">159</span>, <span class="hljs-number">157</span>, <span class="hljs-number">38</span>, <span class="hljs-number">46</span>, <span class="hljs-number">6</span>, <span class="hljs-number">157</span>, <span class="hljs-number">90</span>, <span class="hljs-number">123</span>, <span class="hljs-number">166</span>, <span class="hljs-number">146</span>, <span class="hljs-number">16</span>, <span class="hljs-number">175</span>, <span class="hljs-number">171</span>, <span class="hljs-number">169</span>, <span class="hljs-number">249</span>, <span class="hljs-number">251</span>, <span class="hljs-number">160</span>, <span class="hljs-number">135</span>, <span class="hljs-number">168</span>, <span class="hljs-number">171</span>, <span class="hljs-number">240</span>, <span class="hljs-number">25</span>, <span class="hljs-number">222</span>, <span class="hljs-number">93</span>, <span class="hljs-number">91</span>, <span class="hljs-number">231</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172</span>, <span class="hljs-number">17</span>, <span class="hljs-number">30</span>, <span class="hljs-number">69</span>, <span class="hljs-number">73</span>, <span class="hljs-number">82</span>, <span class="hljs-number">201</span>, <span class="hljs-number">42</span>, <span class="hljs-number">246</span>, <span class="hljs-number">134</span>, <span class="hljs-number">66</span>, <span class="hljs-number">49</span>, <span class="hljs-number">108</span>, <span class="hljs-number">95</span>, <span class="hljs-number">150</span>, <span class="hljs-number">236</span>, <span class="hljs-number">129</span>, <span class="hljs-number">102</span>, <span class="hljs-number">94</span>, <span class="hljs-number">24</span>, <span class="hljs-number">255</span>, <span class="hljs-number">27</span>, <span class="hljs-number">69</span>, <span class="hljs-number">188</span>, <span class="hljs-number">182</span>, <span class="hljs-number">179</span>, <span class="hljs-number">250</span>, <span class="hljs-number">225</span>, <span class="hljs-number">54</span>, <span class="hljs-number">233</span>, <span class="hljs-number">113</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">164</span>, <span class="hljs-number">92</span>, <span class="hljs-number">131</span>, <span class="hljs-number">61</span>, <span class="hljs-number">232</span>, <span class="hljs-number">59</span>, <span class="hljs-number">85</span>, <span class="hljs-number">99</span>, <span class="hljs-number">174</span>, <span class="hljs-number">230</span>, <span class="hljs-number">155</span>, <span class="hljs-number">235</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">36</span>, <span class="hljs-number">55</span>, <span class="hljs-number">178</span>, <span class="hljs-number">65</span>, <span class="hljs-number">89</span>, <span class="hljs-number">177</span>, <span class="hljs-number">99</span>, <span class="hljs-number">76</span>, <span class="hljs-number">98</span>, <span class="hljs-number">54</span>, <span class="hljs-number">100</span>, <span class="hljs-number">188</span>, <span class="hljs-number">139</span>, <span class="hljs-number">221</span>, <span class="hljs-number">165</span>, <span class="hljs-number">68</span>, <span class="hljs-number">157</span>, <span class="hljs-number">191</span>, <span class="hljs-number">115</span>, <span class="hljs-number">242</span>, <span class="hljs-number">75</span>, <span class="hljs-number">56</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">13</span>, <span class="hljs-number">123</span>, <span class="hljs-number">99</span>, <span class="hljs-number">220</span>, <span class="hljs-number">204</span>, <span class="hljs-number">61</span>, <span class="hljs-number">124</span>, <span class="hljs-number">51</span>, <span class="hljs-number">252</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">176</span>, <span class="hljs-number">107</span>, <span class="hljs-number">255</span>, <span class="hljs-number">109</span>&#125;;<br><br><br><span class="hljs-comment">//取出就行了。</span><br><span class="hljs-type">uint8_t</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">214</span>, <span class="hljs-number">144</span>, <span class="hljs-number">233</span>, <span class="hljs-number">254</span>, <span class="hljs-number">204</span>, <span class="hljs-number">225</span>, <span class="hljs-number">61</span>, <span class="hljs-number">183</span>, <span class="hljs-number">22</span>, <span class="hljs-number">182</span>, <span class="hljs-number">20</span>, <span class="hljs-number">194</span>, <span class="hljs-number">40</span>, <span class="hljs-number">251</span>, <span class="hljs-number">44</span>, <span class="hljs-number">5</span>, <span class="hljs-number">43</span>, <span class="hljs-number">103</span>, <span class="hljs-number">154</span>, <span class="hljs-number">118</span>, <span class="hljs-number">42</span>, <span class="hljs-number">190</span>, <span class="hljs-number">4</span>, <span class="hljs-number">195</span>, <span class="hljs-number">170</span>, <span class="hljs-number">68</span>, <span class="hljs-number">19</span>, <span class="hljs-number">38</span>, <span class="hljs-number">73</span>, <span class="hljs-number">134</span>, <span class="hljs-number">6</span>, <span class="hljs-number">153</span>, <span class="hljs-number">156</span>, <span class="hljs-number">66</span>, <span class="hljs-number">80</span>, <span class="hljs-number">244</span>, <span class="hljs-number">145</span>, <span class="hljs-number">239</span>, <span class="hljs-number">152</span>, <span class="hljs-number">122</span>, <span class="hljs-number">51</span>, <span class="hljs-number">84</span>, <span class="hljs-number">11</span>, <span class="hljs-number">67</span>, <span class="hljs-number">237</span>, <span class="hljs-number">207</span>, <span class="hljs-number">172</span>, <span class="hljs-number">98</span>, <span class="hljs-number">228</span>, <span class="hljs-number">179</span>, <span class="hljs-number">28</span>, <span class="hljs-number">169</span>, <span class="hljs-number">201</span>, <span class="hljs-number">8</span>, <span class="hljs-number">232</span>, <span class="hljs-number">149</span>, <span class="hljs-number">128</span>, <span class="hljs-number">223</span>, <span class="hljs-number">148</span>, <span class="hljs-number">250</span>, <span class="hljs-number">117</span>, <span class="hljs-number">143</span>, <span class="hljs-number">63</span>, <span class="hljs-number">166</span>, <span class="hljs-number">71</span>, <span class="hljs-number">7</span>, <span class="hljs-number">167</span>, <span class="hljs-number">252</span>, <span class="hljs-number">243</span>, <span class="hljs-number">115</span>, <span class="hljs-number">23</span>, <span class="hljs-number">186</span>, <span class="hljs-number">131</span>, <span class="hljs-number">89</span>, <span class="hljs-number">60</span>, <span class="hljs-number">25</span>, <span class="hljs-number">230</span>, <span class="hljs-number">133</span>, <span class="hljs-number">79</span>, <span class="hljs-number">168</span>, <span class="hljs-number">104</span>, <span class="hljs-number">107</span>, <span class="hljs-number">129</span>, <span class="hljs-number">178</span>, <span class="hljs-number">113</span>, <span class="hljs-number">100</span>, <span class="hljs-number">218</span>, <span class="hljs-number">139</span>, <span class="hljs-number">248</span>, <span class="hljs-number">235</span>, <span class="hljs-number">15</span>, <span class="hljs-number">75</span>, <span class="hljs-number">112</span>, <span class="hljs-number">86</span>, <span class="hljs-number">157</span>, <span class="hljs-number">53</span>, <span class="hljs-number">30</span>, <span class="hljs-number">36</span>, <span class="hljs-number">14</span>, <span class="hljs-number">94</span>, <span class="hljs-number">99</span>, <span class="hljs-number">88</span>, <span class="hljs-number">209</span>, <span class="hljs-number">162</span>, <span class="hljs-number">37</span>, <span class="hljs-number">34</span>, <span class="hljs-number">124</span>, <span class="hljs-number">59</span>, <span class="hljs-number">1</span>, <span class="hljs-number">33</span>, <span class="hljs-number">120</span>, <span class="hljs-number">135</span>, <span class="hljs-number">212</span>, <span class="hljs-number">0</span>, <span class="hljs-number">70</span>, <span class="hljs-number">87</span>, <span class="hljs-number">159</span>, <span class="hljs-number">211</span>, <span class="hljs-number">39</span>, <span class="hljs-number">82</span>, <span class="hljs-number">76</span>, <span class="hljs-number">54</span>, <span class="hljs-number">2</span>, <span class="hljs-number">231</span>, <span class="hljs-number">160</span>, <span class="hljs-number">196</span>, <span class="hljs-number">200</span>, <span class="hljs-number">158</span>, <span class="hljs-number">234</span>, <span class="hljs-number">191</span>, <span class="hljs-number">138</span>, <span class="hljs-number">210</span>, <span class="hljs-number">64</span>, <span class="hljs-number">199</span>, <span class="hljs-number">56</span>, <span class="hljs-number">181</span>, <span class="hljs-number">163</span>, <span class="hljs-number">247</span>, <span class="hljs-number">242</span>, <span class="hljs-number">206</span>, <span class="hljs-number">249</span>, <span class="hljs-number">97</span>, <span class="hljs-number">21</span>, <span class="hljs-number">161</span>, <span class="hljs-number">224</span>, <span class="hljs-number">174</span>, <span class="hljs-number">93</span>, <span class="hljs-number">164</span>, <span class="hljs-number">155</span>, <span class="hljs-number">52</span>, <span class="hljs-number">26</span>, <span class="hljs-number">85</span>, <span class="hljs-number">173</span>, <span class="hljs-number">147</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>, <span class="hljs-number">245</span>, <span class="hljs-number">140</span>, <span class="hljs-number">177</span>, <span class="hljs-number">227</span>, <span class="hljs-number">29</span>, <span class="hljs-number">246</span>, <span class="hljs-number">226</span>, <span class="hljs-number">46</span>, <span class="hljs-number">130</span>, <span class="hljs-number">102</span>, <span class="hljs-number">202</span>, <span class="hljs-number">96</span>, <span class="hljs-number">192</span>, <span class="hljs-number">41</span>, <span class="hljs-number">35</span>, <span class="hljs-number">171</span>, <span class="hljs-number">13</span>, <span class="hljs-number">83</span>, <span class="hljs-number">78</span>, <span class="hljs-number">111</span>, <span class="hljs-number">213</span>, <span class="hljs-number">219</span>, <span class="hljs-number">55</span>, <span class="hljs-number">69</span>, <span class="hljs-number">222</span>, <span class="hljs-number">253</span>, <span class="hljs-number">142</span>, <span class="hljs-number">47</span>, <span class="hljs-number">3</span>, <span class="hljs-number">255</span>, <span class="hljs-number">106</span>, <span class="hljs-number">114</span>, <span class="hljs-number">109</span>, <span class="hljs-number">108</span>, <span class="hljs-number">91</span>, <span class="hljs-number">81</span>, <span class="hljs-number">141</span>, <span class="hljs-number">27</span>, <span class="hljs-number">175</span>, <span class="hljs-number">146</span>, <span class="hljs-number">187</span>, <span class="hljs-number">221</span>, <span class="hljs-number">188</span>, <span class="hljs-number">127</span>, <span class="hljs-number">17</span>, <span class="hljs-number">217</span>, <span class="hljs-number">92</span>, <span class="hljs-number">65</span>, <span class="hljs-number">31</span>, <span class="hljs-number">16</span>, <span class="hljs-number">90</span>, <span class="hljs-number">216</span>, <span class="hljs-number">10</span>, <span class="hljs-number">193</span>, <span class="hljs-number">49</span>, <span class="hljs-number">136</span>, <span class="hljs-number">165</span>, <span class="hljs-number">205</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>, <span class="hljs-number">45</span>, <span class="hljs-number">116</span>, <span class="hljs-number">208</span>, <span class="hljs-number">18</span>, <span class="hljs-number">184</span>, <span class="hljs-number">229</span>, <span class="hljs-number">180</span>, <span class="hljs-number">176</span>, <span class="hljs-number">137</span>, <span class="hljs-number">105</span>, <span class="hljs-number">151</span>, <span class="hljs-number">74</span>, <span class="hljs-number">12</span>, <span class="hljs-number">150</span>, <span class="hljs-number">119</span>, <span class="hljs-number">126</span>, <span class="hljs-number">101</span>, <span class="hljs-number">185</span>, <span class="hljs-number">241</span>, <span class="hljs-number">9</span>, <span class="hljs-number">197</span>, <span class="hljs-number">110</span>, <span class="hljs-number">198</span>, <span class="hljs-number">132</span>, <span class="hljs-number">24</span>, <span class="hljs-number">240</span>, <span class="hljs-number">125</span>, <span class="hljs-number">236</span>, <span class="hljs-number">58</span>, <span class="hljs-number">220</span>, <span class="hljs-number">77</span>, <span class="hljs-number">32</span>, <span class="hljs-number">121</span>, <span class="hljs-number">238</span>, <span class="hljs-number">95</span>, <span class="hljs-number">62</span>, <span class="hljs-number">215</span>, <span class="hljs-number">203</span>, <span class="hljs-number">57</span>, <span class="hljs-number">72</span>&#125;;<br><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sub_1400012F0</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> a1, <span class="hljs-type">int16_t</span> a2)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int16_t</span> i=<span class="hljs-number">0</span>;i&lt;a2;i++)&#123;<br>        a1 = a1 / <span class="hljs-number">0x80000000</span> + <span class="hljs-number">2</span> * a1;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a1;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">sub_140001340</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> a1)</span>&#123;<br>    <span class="hljs-keyword">return</span> sub_1400012F0(a1,<span class="hljs-number">24</span>) ^ sub_1400012F0(a1, <span class="hljs-number">18</span>) ^ sub_1400012F0(a1, <span class="hljs-number">10</span>) ^ sub_1400012F0(a1, <span class="hljs-number">2</span>) ^ a1;<br>&#125;<br><br><span class="hljs-comment">//完全照抄加密时的逻辑就行，这里是求异或值的地方，我们的目标是要找出一样的异或值，所以要和加密时的逻辑一样。</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">get_xor</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> seed)</span>&#123;<br>    <span class="hljs-type">uint32_t</span> t = <span class="hljs-built_in">map</span>[(<span class="hljs-type">uint8_t</span>)seed] + (<span class="hljs-built_in">map</span>[(<span class="hljs-type">uint8_t</span>)(seed&gt;&gt;<span class="hljs-number">8</span>)] &lt;&lt; <span class="hljs-number">8</span>) + (<span class="hljs-built_in">map</span>[(<span class="hljs-type">uint8_t</span>)(seed&gt;&gt;<span class="hljs-number">16</span>)] &lt;&lt; <span class="hljs-number">16</span>) + (<span class="hljs-built_in">map</span>[(<span class="hljs-type">uint8_t</span>)(seed&gt;&gt;<span class="hljs-number">24</span>)] &lt;&lt; <span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">return</span> sub_140001340(t);<br><br>&#125;<br><br><br><span class="hljs-comment">//仿照加密过程，其实就是一个异或操作，只是这个异或的密钥经过复杂的运算得出的</span><br><span class="hljs-type">void</span>  <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *enc, <span class="hljs-type">uint8_t</span> *key)</span>&#123;<br>    <span class="hljs-type">uint32_t</span> *k = (<span class="hljs-type">uint32_t</span>*)key;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">31</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        enc[i%<span class="hljs-number">4</span>] ^= get_xor(k[i] ^ enc[(i+<span class="hljs-number">3</span>)%<span class="hljs-number">4</span>] ^ enc[(i+<span class="hljs-number">2</span>)%<span class="hljs-number">4</span>] ^ enc[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>]);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <br>    <span class="hljs-comment">//密文最好是调试的时候看，断点下在比较的地方。</span><br>    <span class="hljs-type">uint32_t</span> enc[] = &#123;<span class="hljs-number">0xA8F44759</span>,<span class="hljs-number">0xCDB824F2</span>,<span class="hljs-number">0x32FB3C01</span>,<span class="hljs-number">0x42BEFFE1</span>,<span class="hljs-number">0x3EC30B40</span>,<span class="hljs-number">0xE094AA46</span>,<span class="hljs-number">0x2AEA2B</span>,<span class="hljs-number">0x362C0888</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> enc1[<span class="hljs-number">8</span>];<br>    <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>        <span class="hljs-type">int</span> j = i % <span class="hljs-number">4</span>;<br>        enc1[i] = enc[(i/<span class="hljs-number">4</span>)*<span class="hljs-number">4</span> + (<span class="hljs-number">3</span>-j)];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)&#123;<br>        decrypt(enc1+i*<span class="hljs-number">4</span>,key);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<span class="hljs-comment">//这里开始是反的，还搞错了。字符串的大小端总是让我摸不着头脑。</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,enc1[i]&amp;<span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,enc1[i]&gt;&gt;<span class="hljs-number">8</span>&amp;<span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,enc1[i]&gt;&gt;<span class="hljs-number">16</span>&amp;<span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,enc1[i]&gt;&gt;<span class="hljs-number">24</span>&amp;<span class="hljs-number">0xFF</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="萝卜子的螃蟹"><a href="#萝卜子的螃蟹" class="headerlink" title="萝卜子的螃蟹"></a>萝卜子的螃蟹</h1><p>​RUST语言程序，可以使用IDA反编译打开，难点就是反编译代码很难看，需要配合动调确定程序的运行逻辑。有点累了，改天再写。</p><p>​动调还是经验太少了，趁此机会，好好照着WP学习一下动调的经验。下面只总结了收获的经验，完整WP都有。</p><ul><li><h4 id="通过提示字符串的交叉引用找到程序的主要逻辑函数。"><a href="#通过提示字符串的交叉引用找到程序的主要逻辑函数。" class="headerlink" title="通过提示字符串的交叉引用找到程序的主要逻辑函数。"></a>通过提示字符串的交叉引用找到程序的主要逻辑函数。</h4></li><li><h4 id="看到如下图所示的这种乱七八糟的函数名，看到如此难以读懂的伪代码，先单步调试找到input函数。并且，根据input函数中的参数值，找到存储输入flag的地址。参数是指针，要通过G键跳转到对应的内存地址处查看。"><a href="#看到如下图所示的这种乱七八糟的函数名，看到如此难以读懂的伪代码，先单步调试找到input函数。并且，根据input函数中的参数值，找到存储输入flag的地址。参数是指针，要通过G键跳转到对应的内存地址处查看。" class="headerlink" title="看到如下图所示的这种乱七八糟的函数名，看到如此难以读懂的伪代码，先单步调试找到input函数。并且，根据input函数中的参数值，找到存储输入flag的地址。参数是指针，要通过G键跳转到对应的内存地址处查看。"></a>看到如下图所示的这种乱七八糟的函数名，看到如此难以读懂的伪代码，先单步调试找到input函数。并且，根据input函数中的参数值，找到存储输入flag的地址。参数是指针，要通过G键跳转到对应的内存地址处查看。</h4></li></ul><p><img src="/pictures/ISCTF2024/image-20250522122253781.png" alt="image-20250522122253781"></p><ul><li><h4 id="找到INPUT之后，再酌情分析程序还有哪些重要部分。然后忽略其他操作，除开与输入flag相关的部分，其他都可以不管，需要什么可以靠动调直接读取值。"><a href="#找到INPUT之后，再酌情分析程序还有哪些重要部分。然后忽略其他操作，除开与输入flag相关的部分，其他都可以不管，需要什么可以靠动调直接读取值。" class="headerlink" title="找到INPUT之后，再酌情分析程序还有哪些重要部分。然后忽略其他操作，除开与输入flag相关的部分，其他都可以不管，需要什么可以靠动调直接读取值。"></a>找到INPUT之后，再酌情分析程序还有哪些重要部分。然后忽略其他操作，除开与输入flag相关的部分，其他都可以不管，需要什么可以靠动调直接读取值。</h4></li><li><h4 id="看到长度比较和赋值部分，这一大堆数据很可能就是密文，但是不能着急，密文也是可以做处理的，不到最后比对的时候都不要完全确定密文。"><a href="#看到长度比较和赋值部分，这一大堆数据很可能就是密文，但是不能着急，密文也是可以做处理的，不到最后比对的时候都不要完全确定密文。" class="headerlink" title="看到长度比较和赋值部分，这一大堆数据很可能就是密文，但是不能着急，密文也是可以做处理的，不到最后比对的时候都不要完全确定密文。"></a>看到长度比较和赋值部分，这一大堆数据很可能就是密文，但是不能着急，密文也是可以做处理的，不到最后比对的时候都不要完全确定密文。</h4></li></ul><p><img src="/pictures/ISCTF2024/image-20250522122710905.png" alt="image-20250522122710905"></p><ul><li><h4 id="看到下面前两个函数都是对密文进行操作，v35-v40-v36，不用管。我们只需要锁定住我们的输入即可，v29就是输入字符串的指针，我们看到v29只在405F80参数处出现了，而且下面就是比对了。所以该题应该只在这个函数里面进行了处理。"><a href="#看到下面前两个函数都是对密文进行操作，v35-v40-v36，不用管。我们只需要锁定住我们的输入即可，v29就是输入字符串的指针，我们看到v29只在405F80参数处出现了，而且下面就是比对了。所以该题应该只在这个函数里面进行了处理。" class="headerlink" title="看到下面前两个函数都是对密文进行操作，v35-&gt;v40-&gt;v36，不用管。我们只需要锁定住我们的输入即可，v29就是输入字符串的指针，我们看到v29只在405F80参数处出现了，而且下面就是比对了。所以该题应该只在这个函数里面进行了处理。"></a>看到下面前两个函数都是对密文进行操作，v35-&gt;v40-&gt;v36，不用管。我们只需要锁定住我们的输入即可，v29就是输入字符串的指针，我们看到v29只在405F80参数处出现了，而且下面就是比对了。所以该题应该只在这个函数里面进行了处理。</h4></li></ul><p><img src="/pictures/ISCTF2024/image-20250522122830052.png" alt="image-20250522122830052"></p><ul><li><h4 id="下面的比对操作，需要简单跟踪变量值确定变量代表的含义，在进入406AA0时下断点取出密文值即可。"><a href="#下面的比对操作，需要简单跟踪变量值确定变量代表的含义，在进入406AA0时下断点取出密文值即可。" class="headerlink" title="下面的比对操作，需要简单跟踪变量值确定变量代表的含义，在进入406AA0时下断点取出密文值即可。"></a>下面的比对操作，需要简单跟踪变量值确定变量代表的含义，在进入406AA0时下断点取出密文值即可。</h4></li></ul><p><img src="/pictures/ISCTF2024/image-20250522123228352.png" alt="image-20250522123228352"></p><ul><li><h4 id="重点是怎么知道对输入的操作是什么样子的，在上面的v29处找到输入的flag，打下内存断点，这样每当程序去访问这个地址时就会触发断点，分别我们分析程序对flag做了什么处理。具体操作就是在数据头摁下F2下断点，然后填下数据长度就行。"><a href="#重点是怎么知道对输入的操作是什么样子的，在上面的v29处找到输入的flag，打下内存断点，这样每当程序去访问这个地址时就会触发断点，分别我们分析程序对flag做了什么处理。具体操作就是在数据头摁下F2下断点，然后填下数据长度就行。" class="headerlink" title="重点是怎么知道对输入的操作是什么样子的，在上面的v29处找到输入的flag，打下内存断点，这样每当程序去访问这个地址时就会触发断点，分别我们分析程序对flag做了什么处理。具体操作就是在数据头摁下F2下断点，然后填下数据长度就行。"></a>重点是怎么知道对输入的操作是什么样子的，在上面的v29处找到输入的flag，打下内存断点，这样每当程序去访问这个地址时就会触发断点，分别我们分析程序对flag做了什么处理。具体操作就是在数据头摁下F2下断点，然后填下数据长度就行。</h4></li></ul><p><img src="/pictures/ISCTF2024/image-20250522123655696.png" alt="image-20250522123655696"></p><ul><li><h4 id="之后就可以看情况F9策马奔腾了，注意ntdll有时候回访问这个内存地址的，我们可以通过查看断点表，随时开启或关闭断点，记得配合程序断点，关闭内存断点，直接F9来跳过ntdll的访问，我们只关心主要逻辑对该地址的访问。跳出ntdll后，再开启内存断点。"><a href="#之后就可以看情况F9策马奔腾了，注意ntdll有时候回访问这个内存地址的，我们可以通过查看断点表，随时开启或关闭断点，记得配合程序断点，关闭内存断点，直接F9来跳过ntdll的访问，我们只关心主要逻辑对该地址的访问。跳出ntdll后，再开启内存断点。" class="headerlink" title="之后就可以看情况F9策马奔腾了，注意ntdll有时候回访问这个内存地址的，我们可以通过查看断点表，随时开启或关闭断点，记得配合程序断点，关闭内存断点，直接F9来跳过ntdll的访问，我们只关心主要逻辑对该地址的访问。跳出ntdll后，再开启内存断点。"></a>之后就可以看情况F9策马奔腾了，注意ntdll有时候回访问这个内存地址的，我们可以通过查看断点表，随时开启或关闭断点，记得配合程序断点，关闭内存断点，直接F9来跳过ntdll的访问，我们只关心主要逻辑对该地址的访问。跳出ntdll后，再开启内存断点。</h4></li></ul><p><img src="/pictures/ISCTF2024/image-20250522123845878.png" alt="image-20250522123845878"></p><p><img src="/pictures/ISCTF2024/image-20250522123934610.png" alt="image-20250522123934610"></p><p>​最后复现WP，自己手动找到数据，解密成功。</p><p>​通过本题，我学习到了内存断点找加密操作的方法，发现了通过G键进行内存跳转的功能。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">data = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">52</span><br>enc_data = [<span class="hljs-number">105</span>, <span class="hljs-number">170</span>, <span class="hljs-number">63</span>, <span class="hljs-number">98</span>, <span class="hljs-number">219</span>, <span class="hljs-number">177</span>, <span class="hljs-number">5</span>, <span class="hljs-number">252</span>, <span class="hljs-number">176</span>, <span class="hljs-number">134</span>, <span class="hljs-number">189</span>, <span class="hljs-number">146</span>, <span class="hljs-number">177</span>, <span class="hljs-number">222</span>, <span class="hljs-number">70</span>, <span class="hljs-number">219</span>, <span class="hljs-number">183</span>, <span class="hljs-number">31</span>, <span class="hljs-number">150</span>, <span class="hljs-number">151</span>, <span class="hljs-number">6</span>, <span class="hljs-number">229</span>, <span class="hljs-number">101</span>, <span class="hljs-number">231</span>, <span class="hljs-number">47</span>, <span class="hljs-number">223</span>, <span class="hljs-number">159</span>, <span class="hljs-number">159</span>, <span class="hljs-number">159</span>, <span class="hljs-number">228</span>, <span class="hljs-number">116</span>, <span class="hljs-number">102</span>, <span class="hljs-number">218</span>, <span class="hljs-number">205</span>, <span class="hljs-number">139</span>, <span class="hljs-number">51</span>, <span class="hljs-number">99</span>, <span class="hljs-number">178</span>, <span class="hljs-number">172</span>, <span class="hljs-number">136</span>, <span class="hljs-number">66</span>, <span class="hljs-number">138</span>, <span class="hljs-number">47</span>, <span class="hljs-number">12</span>, <span class="hljs-number">150</span>, <span class="hljs-number">246</span>, <span class="hljs-number">201</span>, <span class="hljs-number">34</span>, <span class="hljs-number">207</span>, <span class="hljs-number">27</span>, <span class="hljs-number">86</span>, <span class="hljs-number">152</span>]<br><br>xor_key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">52</span>):<br>    xor_key.append(enc_data[i] ^ <span class="hljs-built_in">ord</span>(data[i]))<br><br><br>enc_flag =[<span class="hljs-number">97</span>, <span class="hljs-number">184</span>, <span class="hljs-number">61</span>, <span class="hljs-number">119</span>, <span class="hljs-number">220</span>, <span class="hljs-number">139</span>, <span class="hljs-number">54</span>, <span class="hljs-number">200</span>, <span class="hljs-number">130</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">226</span>, <span class="hljs-number">196</span>, <span class="hljs-number">192</span>, <span class="hljs-number">106</span>, <span class="hljs-number">255</span>, <span class="hljs-number">155</span>, <span class="hljs-number">110</span>, <span class="hljs-number">165</span>, <span class="hljs-number">175</span>, <span class="hljs-number">20</span>, <span class="hljs-number">197</span>, <span class="hljs-number">66</span>, <span class="hljs-number">195</span>, <span class="hljs-number">49</span>, <span class="hljs-number">242</span>, <span class="hljs-number">191</span>, <span class="hljs-number">144</span>, <span class="hljs-number">185</span>, <span class="hljs-number">250</span>, <span class="hljs-number">19</span>, <span class="hljs-number">1</span>, <span class="hljs-number">196</span>, <span class="hljs-number">245</span>, <span class="hljs-number">165</span>, <span class="hljs-number">7</span>, <span class="hljs-number">125</span>, <span class="hljs-number">179</span>, <span class="hljs-number">159</span>, <span class="hljs-number">172</span>, <span class="hljs-number">92</span>, <span class="hljs-number">140</span>, <span class="hljs-number">94</span>, <span class="hljs-number">34</span>, <span class="hljs-number">179</span>, <span class="hljs-number">232</span>, <span class="hljs-number">200</span>, <span class="hljs-number">60</span>, <span class="hljs-number">220</span>, <span class="hljs-number">57</span>, <span class="hljs-number">35</span>, <span class="hljs-number">164</span>]<br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">52</span>):<br>    flag += <span class="hljs-built_in">chr</span>(enc_flag[i] ^ xor_key[i])<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ezre&quot;&gt;&lt;a href=&quot;#Ezre&quot; class=&quot;headerlink&quot; title=&quot;Ezre&quot;&gt;&lt;/a&gt;Ezre&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;​	一个简单的维吉尼亚加密，看了半天没看出来，在强行写解密算法后，才突然发现。&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="CTF" scheme="http://localhost:4000/categories/CTF/"/>
    
    
    <category term="复现WP" scheme="http://localhost:4000/tags/%E5%A4%8D%E7%8E%B0WP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://localhost:4000/2025/06/04/hello-world/"/>
    <id>http://localhost:4000/2025/06/04/hello-world/</id>
    <published>2025-06-04T15:39:10.825Z</published>
    <updated>2025-01-03T02:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BaseCTF2024</title>
    <link href="http://localhost:4000/2025/06/04/BaseCTF/BaseCTF2024_RE/"/>
    <id>http://localhost:4000/2025/06/04/BaseCTF/BaseCTF2024_RE/</id>
    <published>2025-06-04T14:30:00.000Z</published>
    <updated>2025-06-21T06:50:35.230Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>UPX mimi：</strong></p><p>​初步接触到了UPX加壳保护的知识和对应的脱壳工具，这是一种“压缩”保护壳，即将源程序代码进行压缩，然后配上解压缩代码，组成新的程序，即“UPX解压代码”+“压缩的源文件”。在程序启动时，会先执行UPX的解压代码，得到解压后的源文件，然后将控制流转移到源文件。</p></blockquote><blockquote><p><strong>ez_maze:</strong></p><p>​最基础的迷宫题目，从IDA中可以直接看到迷宫，人工就能得到路径。</p></blockquote><blockquote><p><strong>BasePlus:</strong></p><p>​无保护，直接拖入IDA，考察基础的阅读代码的能力，加密函数为Base64的一点点变化，对Base64加密后继续异或一下。很基础。第一次认真搓Base64的c语言代码，收获不少。</p></blockquote><blockquote><p><strong>Ez_Xor:</strong></p><p>​复习了大小端序的知识。</p><p>​“小端序”：低位有效字节保存在小地址。如0xDEADBEEF在内存中的顺序是（小地址）EF BE AD DE（大地址）。“大端序”相反。</p><p>​本题就是简单的流加密，生成密钥流然后加密。对应解密即可。</p></blockquote><blockquote><p><strong>UPX:</strong></p><p>​有壳，直接脱壳报错。学习到了，改标志位来保护加壳程序的手段，我们的反制操作就是打开文件，将对应的标志位从小写改回大写。之后就可以正常脱壳了。</p><p>​拖入IDA后，考察的是换表的Base64。唯一需要注意的点就是因为题目源码是C语言，在IDA字符串显示中给双引号全面加了转义符号的，不要搞错了。</p></blockquote><p><img src="/pictures/BaseCTF2024/image-20250425170632940.png" alt="image-20250425170632940"></p><blockquote><p><strong>lk:</strong></p><p>​比较大的线性方程组，考察python的z3solver库使用。</p></blockquote><blockquote><p><strong>喝杯下午茶：</strong></p><p>​标准的Tea加密，第一次使用C语言实现了该算法，收获不少。</p></blockquote><blockquote><p><strong>Ezpy:</strong></p><p>​考察python打包出的EXE程序。反编译出源码。</p><p>​再考察RC4加密。</p></blockquote><blockquote><p><strong>最简单的编码：</strong></p><p>​无保护技术，纯考验伪代码的阅读水平，耐下心来分析就好了。</p></blockquote><blockquote><p><strong>neuro爱数学：</strong></p><p>​</p></blockquote><blockquote><p><strong>RivestCipher:</strong></p><p>​考察标准RC4加密算法。</p></blockquote><blockquote><p><strong>ezAndroid:</strong></p><p>​收获到了逆向apk安装包的软件jadx，接触到了so文件（共享库）逆向，是一些没有接触过的操作。又要读奇怪的代码。唉！</p></blockquote><hr><h1 id="UPX-PRO-MAX"><a href="#UPX-PRO-MAX" class="headerlink" title="UPX PRO MAX"></a><strong>UPX PRO MAX</strong></h1><p>​直接运行EXE程序，会出现下图的显示。</p><p><img src="/pictures/BaseCTF2024/image-20250506132159230.png" alt="image-20250506132159230"></p><p>DIE也看到UPX壳。</p><p><img src="/pictures/BaseCTF2024/image-20250506132311405.png" alt="image-20250506132311405"></p><p>直接上工具是不行的啊，报错了。</p><p>跟着WP学习——<strong>利用ESP定律x64dbg手脱UPX壳</strong>。</p><blockquote><p>“ESP定律”也称“堆栈平衡定律”</p><p>由于在程序自解密或者自解压过程中, 多数壳会先将当前寄存器状态压栈, 如使用<code>pushad</code>, 而在解压结束后, 会将之前的寄存器值出栈, 如使用<code>popad</code>. 因此在寄存器出栈时, 往往程序代码被恢复, 此时硬件断点触发（这就是我们要下硬件断点的原因），然后在程序当前位置, 只需要一些单步操作, 就会到达正确的OEP位置。</p><ol><li>程序刚载入开始 <code>pushad/pushfd</code></li><li>将全部寄存器压栈后就设对 ESP 寄存器设硬件断点</li><li>运行程序, 触发断点</li><li>删除硬件断点开始分析</li></ol></blockquote><p>在x64dbg中，F9两次后来到这个压栈的操作处。接着单步运行一次，看到ESP的值为红色，代表其值被修改了，我们右键选择“在内存窗口中转到”，然后在栈中打下硬件断点。</p><p><img src="/pictures/BaseCTF2024/image-20250506133643545.png" alt="image-20250506133643545"></p><p><img src="/pictures/BaseCTF2024/image-20250506134057787.png" alt="image-20250506134057787"></p><p><img src="/pictures/BaseCTF2024/image-20250506134312068.png" alt="image-20250506134312068"></p><p>之后F9，触发断点后单步运行几下就找到OEP了，即程序入口点。可以看到这个地方的多次pop指令。</p><p>根据wp中的提示，0X41CF65跳转的地方就是程序的入口点了。应该是了。</p><p><img src="/pictures/BaseCTF2024/image-20250506134519180.png" alt="image-20250506134519180"></p><p>下面根据WP中的操作介绍一步步就可以脱出无壳的程序了，叫UPX_PRO_MAX_dump_SCY.exe。</p><blockquote><p><code>scylla</code>插件：在 x64dbg 中内置的 Scylla 插件可用于 dump 进程，<strong>即将内存中的程序数据转储到磁盘上</strong>，形成一个可执行文件的副本，方便后续对程序的分析和研究。</p><p><code>IAT AutoSearch</code>： 在分析经过加壳或加密的程序时，程序的导入表可能被破坏或隐藏，IAT AutoSearch 可以自动扫描内存或代码段，寻找可能的导入函数地址，帮助逆向工程师快速找到程序所调用的外部函数。</p></blockquote><blockquote><p>程序的导入表是程序的关键数据结构，用于列出程序运行时需要从其他模块（通常是 DLL）中导入的函数和变量。以下是导入表的详细介绍：</p><ul><li><p>导入表是程序的一个数据结构，它包含了一系列的引用信息，指向程序运行时需要调用的外部函数和变量所在的模块及其具体地址。</p></li><li><p><strong>便于调用外部模块功能</strong> ：程序通常不会将所有功能都自己实现，而是通过调用系统或第三方提供的 DLL 中的函数和变量来实现复杂的功能。导入表就像一个目录，告诉操作系统程序需要从哪些 DLL 中使用哪些功能。</p></li><li><p><strong>便于程序的动态链接</strong> ：它支持程序的动态链接机制。程序在编译时不会直接将 DLL 中的函数和变量代码包含进来，而是在运行时装载所需的 DLL，并通过导入表找到具体的函数和变量地址，这样可以减少程序自身的体积，同时方便对 DLL 进行更新和共享。</p></li><li><p><strong>导入模块名表</strong> ：存放了程序需要导入的各个模块的名字，比如 “kernel32.dll”“user32.dll” 等。</p></li><li><p><strong>导入函数名表</strong> ：对于每个导入模块，都有一个对应的导入函数名表，列出了从该模块中导入的具体函数名称，如 “MessageBoxA”“CreateFileA” 等。</p></li><li><p><strong>导入函数地址表（IAT）</strong> ：在程序运行时，操作系统会将每个导入函数的实际内存地址填入这个表中，程序通过这个表中的地址来调用相应的函数。</p></li></ul></blockquote><p>脱壳后的程序导入IDA中，很清晰的加密逻辑。直接逆向写脚本就行。</p><p><img src="/pictures/BaseCTF2024/image-20250506141212651.png" alt="image-20250506141212651"></p><p>但是这里出现了一个坑：<code>sub_401550</code>函数其实就是一些加密字符串移动操作，分成几部分存储在几个变量中。但是在验证函数中，全程只用到了a1和a2部分，也就是sub_401550中的a2和a3，不是完整的密文，我觉得这里是中间出了问题，而且这个提取出来的exe程序无法正常运行，IDA中也调试不行，只能静态分析。所以还是有点不靠谱的东西存在。</p><p><img src="/pictures/BaseCTF2024/image-20250506142108769.png" alt="image-20250506142108769"></p><p><img src="/pictures/BaseCTF2024/image-20250506141429954.png" alt="image-20250506141429954"></p><hr><h1 id="EZ-VM"><a href="#EZ-VM" class="headerlink" title="EZ_VM"></a>EZ_VM</h1><p>​基本信息：<code>pyinstaller</code>打包的<code>ELF64</code>位程序，使用<code>pydumpck</code>解包得到<code>py</code>文件。</p><p>​加密逻辑在<code>what.py</code>文件，打开，里面函数名称和变量名都是用数字代替的，还有一些小错误，比如本来的“while”语句变成“if”，需要改过来。</p><p>​代码的逻辑就是：分别使用一个数组变量和一个字典来模拟一个栈和内存，使用变量模拟寄存器，通过数组的<code>pop</code>和<code>push</code>模拟栈的操作，使用函数定义各种汇编指令，如push、pop、add、sub等等，都是统一操作数长度。就这样定义了一个能够通过汇编指令进行运行的“虚拟机”，里面存在出题人预先写好的一段静态汇编代码，作为加密函数。</p><blockquote><ol><li>我们首要任务就是给源python代码进行重命名和明显的错误纠正。（需要足够熟悉汇编指令，起码的要知道。转移指令还没那么重要，因为我们不关心程序的执行流程，我们只需要注意密文的来处即可。）</li><li>然后在其中插入print调试语句输出操作指令、栈和内存的值，锁定密文的存储地方，观察加密方法。</li><li>根据加密方法写逆向脚本。</li></ol></blockquote><p>​</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc_flag = [<br>    <span class="hljs-number">35</span>,<br>    <span class="hljs-number">18</span>,<br>    <span class="hljs-number">22</span>,<br>    <span class="hljs-number">38</span>,<br>    <span class="hljs-number">23</span>,<br>    <span class="hljs-number">18</span>,<br>    <span class="hljs-number">61</span>,<br>    <span class="hljs-number">25</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">4</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">95</span>,<br>    <span class="hljs-number">20</span>,<br>    <span class="hljs-number">29</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">82</span>,<br>    <span class="hljs-number">1</span>,<br>    <span class="hljs-number">29</span>,<br>    <span class="hljs-number">25</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">81</span>,<br>    <span class="hljs-number">72</span>,<br>    <span class="hljs-number">76</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">3</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">79</span>,<br>    <span class="hljs-number">73</span>,<br>    <span class="hljs-number">83</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">15</span>,<br>    <span class="hljs-number">9</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">7</span>,<br>    <span class="hljs-number">80</span>,<br>    <span class="hljs-number">82</span>,<br>    <span class="hljs-number">0</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">84</span>,<br>    <span class="hljs-number">77</span>,<br>    <span class="hljs-number">130</span>]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Opcode</span>:<br>    vm_push = <span class="hljs-number">240</span><br>    vm_pop = <span class="hljs-number">241</span><br>    vm_and = <span class="hljs-number">242</span><br>    vm_or = <span class="hljs-number">243</span><br>    vm_not = <span class="hljs-number">244</span><br>    vm_xor = <span class="hljs-number">245</span><br>    vm_jmp = <span class="hljs-number">246</span><br>    vm_jz = <span class="hljs-number">247</span><br>    vm_label = <span class="hljs-number">248</span><br>    vm_strlen = <span class="hljs-number">249</span><br>    vm_loadchar = <span class="hljs-number">250</span><br>    vm_store = <span class="hljs-number">251</span><br>    vm_load = <span class="hljs-number">252</span><br>    vm_add = <span class="hljs-number">253</span><br>    vm_sub = <span class="hljs-number">254</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VM</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.stack = []<br>        <span class="hljs-variable language_">self</span>.bytecode = []<br>        <span class="hljs-variable language_">self</span>.pc = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.labels = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.memory = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-variable language_">self</span>.stack.append(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.stack:<br>            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">&#x27;something wrong..&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.stack.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_scan_labels</span>(<span class="hljs-params">self</span>):<br>        labels = &#123;&#125;<br>        pc = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> pc &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.bytecode):<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.bytecode[pc] == Opcode.vm_label:<br>                label_name = <span class="hljs-variable language_">self</span>.bytecode[pc + <span class="hljs-number">1</span>]<br>                labels[label_name] = pc<br>                pc += <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                pc += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_and</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b &amp; a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_or</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b | a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_not</span>(<span class="hljs-params">self</span>):<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(~b)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_xor</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b ^ a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_jmp</span>(<span class="hljs-params">self</span>):<br>        label_name = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-variable language_">self</span>.pc = <span class="hljs-variable language_">self</span>.labels[label_name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_jz</span>(<span class="hljs-params">self</span>):<br>        label_name = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-keyword">if</span> a == b:<br>            <span class="hljs-variable language_">self</span>.pc = <span class="hljs-variable language_">self</span>.labels[label_name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_strlen</span>(<span class="hljs-params">self</span>):<br>        string = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(<span class="hljs-built_in">len</span>(string))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_loadchar</span>(<span class="hljs-params">self</span>):<br>        string = <span class="hljs-variable language_">self</span>.pop()<br>        index = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(<span class="hljs-built_in">ord</span>(string[index]))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_store</span>(<span class="hljs-params">self</span>):<br>        value = <span class="hljs-variable language_">self</span>.pop()<br>        key = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;r&#x27;</span>:<br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.memory:<br>                <span class="hljs-variable language_">self</span>.memory[key] = []<br>            <span class="hljs-variable language_">self</span>.memory[key].append(value)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.memory[key] = value<br>        <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_load</span>(<span class="hljs-params">self</span>):<br>        key = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>        <span class="hljs-variable language_">self</span>.push(<span class="hljs-variable language_">self</span>.memory[key])<br>        <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_add</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b + a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_sub</span>(<span class="hljs-params">self</span>):<br>        a = <span class="hljs-variable language_">self</span>.pop()<br>        b = <span class="hljs-variable language_">self</span>.pop()<br>        <span class="hljs-variable language_">self</span>.push(b - a)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, bytecode</span>):<br>        <span class="hljs-variable language_">self</span>.bytecode = bytecode<br>        <span class="hljs-variable language_">self</span>.pc = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.labels = <span class="hljs-variable language_">self</span>._scan_labels()<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.pc &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.bytecode):<br>            opcode = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>            <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> opcode == Opcode.vm_push:<br>                value = <span class="hljs-variable language_">self</span>.bytecode[<span class="hljs-variable language_">self</span>.pc]<br>                <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.push(value)<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_pop:<br>                <span class="hljs-variable language_">self</span>.pop()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_and:<br>                <span class="hljs-variable language_">self</span>.vm_and()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_or:<br>                <span class="hljs-variable language_">self</span>.vm_or()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_not:<br>                <span class="hljs-variable language_">self</span>.vm_not()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_xor:<br>                <span class="hljs-variable language_">self</span>.vm_xor()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_jmp:<br>                <span class="hljs-variable language_">self</span>.vm_jmp()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_jz:<br>                <span class="hljs-variable language_">self</span>.vm_jz()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_label:<br>                <span class="hljs-variable language_">self</span>.pc += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_strlen:<br>                <span class="hljs-variable language_">self</span>.vm_strlen()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_loadchar:<br>                <span class="hljs-variable language_">self</span>.vm_loadchar()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_store:<br>                <span class="hljs-variable language_">self</span>.vm_store()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_load:<br>                <span class="hljs-variable language_">self</span>.vm_load()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_add:<br>                <span class="hljs-variable language_">self</span>.vm_add()<br>            <span class="hljs-keyword">elif</span> opcode == Opcode.vm_sub:<br>                <span class="hljs-variable language_">self</span>.vm_sub()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;pc: <span class="hljs-subst">&#123;self.pc&#125;</span>| opcode: <span class="hljs-subst">&#123;get_opcode_name(opcode)&#125;</span>, stack: <span class="hljs-subst">&#123;self.stack&#125;</span>, memory: <span class="hljs-subst">&#123;self.memory&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, serial</span>):<br>        bytecode = [<br>            Opcode.vm_push, serial,<br>            Opcode.vm_strlen,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;l1&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">0</span>,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_label, <span class="hljs-string">&#x27;s&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;l1&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">1</span>,<br>            Opcode.vm_sub,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_jz, <span class="hljs-string">&#x27;e&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, serial,<br>            Opcode.vm_loadchar,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">1</span>,<br>            Opcode.vm_add,<br>            Opcode.vm_push, serial,<br>            Opcode.vm_loadchar,<br>            Opcode.vm_xor,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;r&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, <span class="hljs-number">1</span>,<br>            Opcode.vm_add,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_jmp, <span class="hljs-string">&#x27;s&#x27;</span>,<br>            Opcode.vm_label, <span class="hljs-string">&#x27;e&#x27;</span>,<br>            Opcode.vm_load, <span class="hljs-string">&#x27;i&#x27;</span>,<br>            Opcode.vm_push, serial,<br>            Opcode.vm_loadchar,<br>            Opcode.vm_push, <span class="hljs-number">255</span>,<br>            Opcode.vm_xor,<br>            Opcode.vm_store, <span class="hljs-string">&#x27;r&#x27;</span><br>        ]<br>        <span class="hljs-variable language_">self</span>.run(bytecode)<br>        enc = <span class="hljs-variable language_">self</span>.memory[<span class="hljs-string">&#x27;r&#x27;</span>]<br>        <span class="hljs-keyword">return</span> enc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_opcode_name</span>(<span class="hljs-params">opcode</span>):<br>    <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> Opcode.__dict__.items():<br>        <span class="hljs-keyword">if</span> value == opcode:<br>            <span class="hljs-keyword">return</span> name<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>vm = VM()<br>test_flag = <span class="hljs-string">&quot;BaseCTF&#123;VM_is_awesome&#125;&quot;</span><br>enc = vm.encrypt(test_flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;encrypted test_flag: <span class="hljs-subst">&#123;enc&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;original flag: <span class="hljs-subst">&#123;enc_flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>根据WP提示重命名后，观察传输的调试信息。看一下开头和结尾就行。</p><p><img src="/pictures/BaseCTF2024/image-20250509160138052.png" alt="image-20250509160138052"></p><p><img src="/pictures/BaseCTF2024/image-20250509160305470.png" alt="image-20250509160305470"></p><p>​所以猜到加密逻辑是：从前往后，相邻两位异或，尾部和255异或。</p><p>这里给出我的解密脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc_flag = [<span class="hljs-number">35</span>, <span class="hljs-number">18</span>, <span class="hljs-number">22</span>, <span class="hljs-number">38</span>, <span class="hljs-number">23</span>,  <span class="hljs-number">18</span>,<span class="hljs-number">61</span>, <span class="hljs-number">25</span>,  <span class="hljs-number">83</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>,<span class="hljs-number">83</span>,<span class="hljs-number">95</span>,  <span class="hljs-number">20</span>,  <span class="hljs-number">29</span>, <span class="hljs-number">83</span>,<span class="hljs-number">82</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">29</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">81</span>,<span class="hljs-number">72</span>,<span class="hljs-number">76</span>,<span class="hljs-number">85</span>,<span class="hljs-number">3</span>,<span class="hljs-number">85</span>,<span class="hljs-number">79</span>,<span class="hljs-number">73</span>,<span class="hljs-number">83</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">85</span>,<span class="hljs-number">7</span>,<span class="hljs-number">80</span>,<span class="hljs-number">82</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">84</span>,<span class="hljs-number">77</span>,<span class="hljs-number">130</span>,<span class="hljs-number">255</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc_flag)):<br>    char = enc_flag[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(enc_flag)):<br>        char = char ^ enc_flag[j]<br><br>    flag += <span class="hljs-built_in">chr</span>(char)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><hr><h1 id="Microgame"><a href="#Microgame" class="headerlink" title="Microgame"></a>Microgame</h1><p>​不理解，不会游戏逆向，后面得学啊。专门做了一个CE的学习。</p><p>​学习完CE，专门出个WP来做。</p><hr><h1 id="neuro爱数学"><a href="#neuro爱数学" class="headerlink" title="neuro爱数学"></a>neuro爱数学</h1><p>​直接打开IDA看看<code>main</code>函数，程序无壳，就是考察数学问题。</p><p><img src="/pictures/BaseCTF2024/image-20250512120720066.png" alt="image-20250512120720066"></p><p><img src="/pictures/BaseCTF2024/image-20250512130852846.png" alt="image-20250512130852846"></p><p><img src="/pictures/BaseCTF2024/image-20250512130953971.png" alt="image-20250512130953971"></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//注意：各个变量和函数的类型是关键，不能搞错，需要对照IDA伪代码</span><br>    <span class="hljs-type">int64_t</span> v5=<span class="hljs-number">0x400C0210000001</span>;<span class="hljs-comment">//这个值是固定的，但是需要动调程序得到这个值。</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">-60</span>; i&lt;=<span class="hljs-number">59</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">44</span> || i == <span class="hljs-number">58</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;符合条件的i值位：%d/n&quot;</span>, i);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v12 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + <span class="hljs-number">37</span>);<br>        <span class="hljs-keyword">if</span>(v12 &lt;= <span class="hljs-number">54</span> &amp;&amp; _bittest64((<span class="hljs-type">int64_t</span>*)&amp;v5,(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v12) != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;符合条件的i值为：%d/n&quot;</span>, i);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/pictures/BaseCTF2024/image-20250512131328904.png" alt="image-20250512131328904"></p><p>然后使用python脚本展开多项式得到系数。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, expand<br><br><span class="hljs-comment"># 定义符号变量</span><br>x = symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br><br><span class="hljs-comment"># 构造多项式</span><br>polynomial = (x - <span class="hljs-number">44</span>) * (x - <span class="hljs-number">58</span>) * (x - <span class="hljs-number">5</span>) * (x + <span class="hljs-number">37</span>) * (x - <span class="hljs-number">17</span>) * (x + <span class="hljs-number">9</span>) * (x - <span class="hljs-number">6</span>) * (x + <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 展开多项式</span><br>expanded_polynomial = expand(polynomial)<br><br><span class="hljs-comment"># 提取并打印系数</span><br>standard_form = expanded_polynomial.as_poly()  <span class="hljs-comment"># 获取标准形式的多项式</span><br>coefficients = standard_form.all_coeffs()    <span class="hljs-comment"># 获取所有系数</span><br><br><span class="hljs-comment"># 打印系数逆序（从常数项到最高次项）。因为正常是从高次项到低次项。</span><br><span class="hljs-built_in">print</span>(coefficients[::-<span class="hljs-number">1</span>])<br><span class="hljs-comment">#[-1733624640, 134045088, 122783468, -12168520, -1364231, 121272, -358, -80, 1]</span><br></code></pre></td></tr></table></figure><p><img src="/pictures/BaseCTF2024/image-20250512131708984.png" alt="测试图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPX mimi：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	初步接触到了UPX加壳保护的知识和对应的脱壳工具，这是一种“压缩”保护壳，即将源程序代码进行压缩，然后配上解压缩代码，组成新的程序，即“UPX解压代码”+“压缩的源文</summary>
      
    
    
    
    <category term="CTF" scheme="http://localhost:4000/categories/CTF/"/>
    
    
    <category term="复现WP" scheme="http://localhost:4000/tags/%E5%A4%8D%E7%8E%B0WP/"/>
    
  </entry>
  
</feed>
